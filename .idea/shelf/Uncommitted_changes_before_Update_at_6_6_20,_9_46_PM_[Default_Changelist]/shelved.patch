Index: src/Room.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* This is the Room class that contains the\ndifferent questions for the room, and occupied status\nAuthor: Steven Zuelke\n */\n\nimport QuestionTypes.Question;\nimport javafx.geometry.Point2D;\n\nimport java.io.Serializable;\n\npublic class Room implements Serializable {\n\n    //QuestionTypes.Question[0] is up and increments Clockwise\n    private Question[] Questions;\n    private Boolean Occupied;\n    private boolean topLocked = false;\n    private boolean bottomLocked = false;\n    private boolean leftLocked = false;\n    private boolean rightLocked = false;\n\n    //Constructor\n\n    public Room(Question[] questions, Boolean occupied){\n\n        Questions = questions;\n        Occupied = occupied;\n\n    }//end Constructor\n\n    //Getters for specific question and Occupied status\n\n    public Boolean GetOccupied(){ return Occupied; }\n\n    public void SetOccupied(Boolean bool){Occupied = bool;}\n\n    //Returns null if No question at that index\n\n    public Question GetQuestion(int index){\n\n        Question q;\n        if((q = Questions[index]) != null){\n\n            return q;\n\n        }//end if q\n        return null;\n\n    }//end GetQuestion\n\n    public boolean getTopLocked() {\n        if(topLocked) {\n            System.out.println(\"Sorry, this door is locked\");\n        }\n        return topLocked;\n    }\n\n    public boolean getBottomLocked() {\n        if(bottomLocked) {\n            System.out.println(\"Sorry, this door is locked\");\n        }\n        return bottomLocked;\n    }\n\n    public boolean getLeftLocked() {\n        if(leftLocked) {\n            System.out.println(\"Sorry, this door is locked\");\n        }\n        return leftLocked;\n    }\n\n    public boolean getRightLocked() {\n        if(rightLocked) {\n            System.out.println(\"Sorry, this door is locked\");\n        }\n        return rightLocked;\n    }\n\n    public void setBottomLocked(boolean isLocked) {\n        bottomLocked = isLocked;\n    }\n\n    public void setTopLocked(boolean isLocked) {\n        topLocked = isLocked;\n    }\n\n    public void setLeftLocked(boolean isLocked) {\n        leftLocked = isLocked;\n    }\n\n    public void setRightLocked(boolean isLocked) {\n        rightLocked = isLocked;\n    }\n\n    public void DisplayRoom() {\n        String wallBelow = \"- - - - - - - - - -\\n\";\n        String wallAbove = \"- - - - - - - - - -\\n\";\n        String openRoomAbove = \"- - - O P E N - - -\\n\";\n        String lockedRoomAbove = \"- - L O C K E D - -\\n\";\n        String openRoomBelow = \"- - - O P E N - - -\\n\";\n        String lockedRoomBelow = \"- - L O C K E D - -\\n\";\n        String lockedLeftAndRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"L                  L\\n\" +\"O                  O\\n\" +\"C                  C\\n\"\n                +\"K                  K\\n\" +\"E                  E\\n\" +\"D                  D\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n\n        String unlockedLeftAndRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"|                  |\\n\" +\"O                  O\\n\" +\"P                  P\\n\"\n                +\"E                  E\\n\" +\"N                  N\\n\" +\"|                  |\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n        String unlockedLeftAndLockedRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"|                  L\\n\" +\"O                  O\\n\" +\"P                  C\\n\"\n                +\"E                  K\\n\" +\"N                  E\\n\" +\"|                  D\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n        String lockedLeftAndUnlockedRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"L                  |\\n\" +\"O                  O\\n\" +\"C                  P\\n\"\n                +\"K                  E\\n\" +\"E                  N\\n\" +\"D                  |\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n        String wallLeftAndUnlockedRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"|                  |\\n\" +\"|                  O\\n\" +\"|                  P\\n\"\n                +\"|                  E\\n\" +\"|                  N\\n\" +\"|                  |\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n        String wallLeftAndLockedRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"|                  L\\n\" +\"|                  O\\n\" +\"|                  C\\n\"\n                +\"|                  K\\n\" +\"|                  E\\n\" +\"|                  D\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n        String unlockedLeftAndWallRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"|                  |\\n\" +\"O                  |\\n\" +\"P                  |\\n\"\n                +\"E                  |\\n\" +\"N                  |\\n\" +\"|                  |\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n        String lockedLeftAndWallRight = \"|                  |\\n\" + \"|                  |\\n\"\n                +\"L                  |\\n\" +\"O                  |\\n\" +\"C                  |\\n\"\n                +\"K                  |\\n\" +\"E                  |\\n\" +\"D                  |\\n\"\n                +\"|                  |\\n\" +\"|                  |\\n\";\n        String finalRoomString = \"\";\n\n        if(Maze.GetRoom().getY() == 0) {\n            finalRoomString += wallAbove;\n        } else if(topLocked) {\n            finalRoomString += lockedRoomAbove;\n        } else {\n            finalRoomString += openRoomAbove;\n        }\n\n        if(Maze.GetRoom().getX() == 0 && rightLocked) {\n            finalRoomString += wallLeftAndLockedRight;\n        } else if (Maze.GetRoom().getX() == 0 && !rightLocked) {\n                finalRoomString += wallLeftAndUnlockedRight;\n        } else if (Maze.GetRoom().getX() == Maze.GetAllRooms().length - 1 && !leftLocked) {\n                finalRoomString += unlockedLeftAndWallRight;\n        } else if (Maze.GetRoom().getX() == Maze.GetAllRooms().length - 1 && leftLocked) {\n            finalRoomString += lockedLeftAndWallRight;\n        } else if (!leftLocked && !rightLocked) {\n            finalRoomString += unlockedLeftAndRight;\n        } else if (leftLocked && rightLocked) {\n            finalRoomString += lockedLeftAndRight;\n        } else if (leftLocked && !rightLocked) {\n            finalRoomString += lockedLeftAndUnlockedRight;\n        } else if (!leftLocked && rightLocked) {\n            finalRoomString += unlockedLeftAndLockedRight;\n        }\n\n        if(Maze.GetRoom().getY() == Maze.GetAllRooms().length - 1) {\n            finalRoomString += wallBelow;\n        } else if(bottomLocked) {\n            finalRoomString += lockedRoomBelow;\n        } else {\n            finalRoomString += openRoomBelow;\n        }\n\n        System.out.println(finalRoomString);\n    }\n\n}//end class\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Room.java	(revision 9bd1efbc945d9c08212c58bce74310ca3cc1ddc6)
+++ src/Room.java	(date 1589977724820)
@@ -170,4 +170,63 @@
         System.out.println(finalRoomString);
     }
 
+    public String getSamllRoomDisplay() {
+        String player = " ";
+        if(Occupied) {
+            player = "@";
+        }
+        String finalRoomString = "";
+        String wallAbove = "* * *\n";
+        String wallBelow = "* * *\n";
+        String lockedRoomAbove = "* L *\n";
+        String openRoomAbove = "* O *\n";
+        String lockedRoomBelow = "* L *\n";
+        String openRoomBelow = "* O *\n";
+        String wallLeftAndUnlockedRight = "* " + player + " O\n";
+        String unlockedLeftAndWallRight = "O " + player + " *\n";
+        String lockedLeftAndWallRight = "L " + player + " *\n";
+        String wallLeftAndLockedRight = "* " + player + " L\n";
+        String unlockedLeftAndRight = "O " + player + " O\n";
+        String lockedLeftAndRight = "L " + player + " L\n";
+        String lockedLeftAndUnlockedRight = "L " + player + " O\n";
+        String unlockedLeftAndLockedRight = "O " + player + " L\n";
+
+
+        if(Maze.GetRoom().getY() == 0) {
+            finalRoomString += wallAbove;
+        } else if(topLocked) {
+            finalRoomString += lockedRoomAbove;
+        } else {
+            finalRoomString += openRoomAbove;
+        }
+
+        if(Maze.GetRoom().getX() == 0 && rightLocked) {
+            finalRoomString += wallLeftAndLockedRight;
+        } else if (Maze.GetRoom().getX() == 0 && !rightLocked) {
+            finalRoomString += wallLeftAndUnlockedRight;
+        } else if (Maze.GetRoom().getX() == Maze.GetAllRooms().length - 1 && !leftLocked) {
+            finalRoomString += unlockedLeftAndWallRight;
+        } else if (Maze.GetRoom().getX() == Maze.GetAllRooms().length - 1 && leftLocked) {
+            finalRoomString += lockedLeftAndWallRight;
+        } else if (!leftLocked && !rightLocked) {
+            finalRoomString += unlockedLeftAndRight;
+        } else if (leftLocked && rightLocked) {
+            finalRoomString += lockedLeftAndRight;
+        } else if (leftLocked && !rightLocked) {
+            finalRoomString += lockedLeftAndUnlockedRight;
+        } else if (!leftLocked && rightLocked) {
+            finalRoomString += unlockedLeftAndLockedRight;
+        }
+
+        if(Maze.GetRoom().getY() == Maze.GetAllRooms().length - 1) {
+            finalRoomString += wallBelow;
+        } else if(bottomLocked) {
+            finalRoomString += lockedRoomBelow;
+        } else {
+            finalRoomString += openRoomBelow;
+        }
+        System.out.println(finalRoomString);
+        return finalRoomString;
+    }
+
 }//end class
Index: src/Maze.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* This is the maze class that will contain all Rooms\nand the Gameplay called by Main\nAuthor: Steven Zuelke\n */\n\nimport QuestionTypes.Question;\nimport javafx.geometry.Point2D;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport java.util.Scanner;\n\npublic class Maze implements Serializable {\n\n    static Room[][] Rooms;\n    DataAccess DataAccess;\n\n    //Constructor\n\n    public Maze(){\n\n        Rooms = new Room[3][3];\n        DataAccess = new DataAccess();\n        SetupRooms();\n\n    }//end Constructor\n\n    //Method to ask the player the question\n\n    private boolean AskQuestion(int direction){\n\n        boolean correct = false;\n        String input = \"\";\n\n        Point2D currentRoom = GetRoom();\n        System.out.println(Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].GetQuestion(direction).GetTitle());\n        if(Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].GetQuestion(direction).GetAnswers().length > 0){\n\n            System.out.print(\"(\");\n            for(int i = 0; i < Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].GetQuestion(direction).GetAnswers().length; i++){\n\n                System.out.print(Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].GetQuestion(direction).GetAnswers()[i] + \" \");\n\n            }//end for i\n\n            System.out.print(\")\");\n\n        }//end if answers > 0\n\n        input = (new Scanner(System.in)).nextLine();\n        correct = Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].GetQuestion(direction).CheckCorrect(input);\n        if(correct) System.out.println(\"Correct!\");\n        else {\n            System.out.println(\"Incorrect!\");\n            lockDoor(direction);\n        }\n        return correct;\n\n    }//end AskQuestion\n\n    //Method to lock the door in the direction that an incorrect answer was provided\n    private void lockDoor(int direction) {\n        Point2D currentRoom = GetRoom();\n        if(direction == 0) {\n            Rooms[(int) currentRoom.getX()][(int) currentRoom.getY() - 1].setBottomLocked(true);\n            Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].setTopLocked(true);\n            System.out.println(\"The room above you is now locked forever :(\");\n        }\n        if(direction == 1) {\n            Rooms[(int) currentRoom.getX() + 1][(int) currentRoom.getY()].setLeftLocked(true);\n            Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].setRightLocked(true);\n            System.out.println(\"The room to the right of you is now locked forever :(\");\n        }\n        if(direction == 2) {\n            Rooms[(int) currentRoom.getX()][(int) currentRoom.getY() + 1].setTopLocked(true);\n            Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].setBottomLocked(true);\n            System.out.println(\"The room below you is now locked forever :(\");\n        }\n        if(direction == 3) {\n            Rooms[(int) currentRoom.getX() - 1][(int) currentRoom.getY()].setRightLocked(true);\n            Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].setLeftLocked(true);\n            System.out.println(\"The room to the left of you is now locked forever :(\");\n        }\n    }//lockDoor\n\n    //Method to try and move the player to a new room\n    //Index parameter at 0 is UP and increments Clockwise\n\n    public Boolean ChangeRooms(int index){\n\n        Boolean moved = true;\n        Point2D currentRoom = GetRoom();\n\n        if((currentRoom.getX() == 0 && index == 3) ||\n                (currentRoom.getY() == 0 && index == 0) ||\n                (currentRoom.getX() == Rooms.length - 1 && index == 1) ||\n                (currentRoom.getY() == Rooms.length - 1 && index == 2)) return false;\n        //end if out of bounds\n\n        //Switch vacancies in rooms\n\n        switch(index){\n            case 0:\n                if(!Rooms[(int) currentRoom.getX()][(int) currentRoom.getY() - 1].getBottomLocked() && AskQuestion(0)) {\n                    Rooms[(int) currentRoom.getX()][(int) currentRoom.getY() - 1].SetOccupied(true);\n                } else return false;\n                break;\n            case 1:\n                if(!Rooms[(int) currentRoom.getX() + 1][(int) currentRoom.getY()].getRightLocked() && AskQuestion(1)) {\n                    Rooms[(int) currentRoom.getX() + 1][(int) currentRoom.getY()].SetOccupied(true);\n                } else return false;\n                break;\n            case 2:\n                if(!Rooms[(int) currentRoom.getX()][(int) currentRoom.getY() + 1].getTopLocked() && AskQuestion(2)) {\n                    Rooms[(int) currentRoom.getX()][(int) currentRoom.getY() + 1].SetOccupied(true);\n                } else return false;\n                break;\n            case 3:\n                if(!Rooms[(int) currentRoom.getX() - 1][(int) currentRoom.getY()].getLeftLocked() && AskQuestion(3)) {\n                    Rooms[(int) currentRoom.getX() - 1][(int) currentRoom.getY()].SetOccupied(true);\n                } else return false;\n                break;\n        }//end switch index\n\n        Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].SetOccupied(false);\n        return moved;\n\n    }//end ChangeRooms\n\n    //Method to see if the character has no way to win (aka lost)\n    //Recursively exhaust every path, and if no possible path contains the end,\n    //then you lost and returns true\n\n    public boolean CheckLoss(int r, int c, ArrayList<Point2D> previousRooms){\n\n        boolean loss = false;\n\n        previousRooms.add(new Point2D(r, c));\n        if(r == Rooms.length - 1 && c == Rooms[0].length - 1)\n            return false; //Base case (can reach the end)\n        //end if\n        if(r != Rooms.length - 1 && //Not at right side\n            !previousRooms.contains(new Point2D(r + 1, c)) && //Haven't already been there\n            !Rooms[r][c].GetQuestion(1).GetLocked()) {//Door isn't locked\n\n            loss = CheckLoss(r + 1, c, previousRooms);\n            if(!loss) return false;//early bailout\n\n        }\n        //end if\n\n        if(c != Rooms[0].length - 1 && //Not at bottom yet\n            !previousRooms.contains(new Point2D(r, c + 1)) && //Haven't already been there\n            !Rooms[r][c].GetQuestion(2).GetLocked()) {//Door isn't locked\n\n            loss = CheckLoss(r, c + 1, previousRooms);\n            if(!loss) return false;//early bailout\n\n        }//end if\n\n        if(r != 0 && //Not at left yet\n            !previousRooms.contains(new Point2D(r - 1, c)) &&//Haven't already been there\n            !Rooms[r][c].GetQuestion(3).GetLocked()){ //Door isn't locked\n\n            loss = CheckLoss(r - 1, c, previousRooms);\n            if(!loss) return false;//early bailout\n\n        }//end if\n\n        if(c != 0 && //Not at top yet\n            !previousRooms.contains(new Point2D(r, c - 1)) &&//Haven't already been there\n            !Rooms[r][c].GetQuestion(0).GetLocked()){ //Door isn't locked\n\n            loss = CheckLoss(r, c - 1, previousRooms);\n            if(!loss) return false;//early bailout\n\n        }//end if\n\n        //if reached this point, there is no way past current point\n        previousRooms.remove(new Point2D(r, c));\n        loss = true;\n        return loss;\n\n    }//end CheckLoss\n\n    //Method to see if the character has won the game after any move\n\n    public boolean CheckWin(){\n\n        Boolean won = false;\n        if(Rooms[Rooms.length - 1][Rooms[0].length - 1].GetOccupied()) won = true;\n        return won;\n\n    }//end CheckWin\n\n    //Method to return the current room of the player with Point2D\n\n    public static Point2D GetRoom(){\n\n        Point2D currentRoom = new Point2D(0, 0);\n\n        for(int i = 0; i < Rooms.length; i++){\n\n            for(int j = 0; j < Rooms[0].length; j++){\n\n                if(Rooms[i][j].GetOccupied()) currentRoom = new Point2D(i, j);\n\n            }//end for j\n\n        }//end for i\n\n        return currentRoom;\n    }//end GetRoom\n\n    //Method to return the array of rooms\n    public static Room[][] GetAllRooms() {\n        return Rooms;\n    }\n\n    //Method to Pick a question from database that isn't already in use\n\n    private Question PickQuestion(ArrayList<Question> used){\n\n        Question question;\n\n        ArrayList<Question> allQuestions = DataAccess.GetQuestions();\n        question = allQuestions.get(0);\n        while(used.contains(question)){\n\n            int index = Math.abs((new Random()).nextInt() % allQuestions.size());\n            question = allQuestions.get(index);\n\n        }//end while\n\n        return question;\n\n    }//end PickQuestion\n\n    //Method to set up all rooms for beginning of game\n\n    private void SetupRooms(){\n\n        ArrayList<Question> used = new ArrayList<Question>();\n        for(int i = 0; i < Rooms.length; i++){\n\n            for(int j = 0; j < Rooms[0].length; j++){\n\n                Question[] questions = new Question[4];\n                Boolean occupied = false;\n                //for each room fill appropriate question list\n                //Top\n                if(j != 0){\n\n                    questions[0] = PickQuestion(used);\n                    used.add(questions[0]);\n\n                }//end if 0\n\n                else questions[0] = null;\n                //Right\n                if(i != Rooms[0].length - 1){\n\n                    questions[1] = PickQuestion(used);\n                    used.add(questions[1]);\n\n                }//end if 1\n\n                else questions[1] = null;\n                //Bottom\n                if(j != Rooms.length - 1){\n\n                    questions[2] = PickQuestion(used);\n                    used.add(questions[2]);\n\n                }//end if 2\n\n                else questions[2] = null;\n                //Left\n                if(i != 0){\n\n                    questions[3] = PickQuestion(used);\n                    used.add(questions[3]);\n\n                }//end if 3\n\n                else questions[3] = null;\n\n                //Put character in top left\n                if(i == 0 && j == 0) occupied = true;\n                Rooms[i][j] = new Room(questions, occupied);\n\n            }//end for j\n\n        }//end for i\n\n    }//end SetupRooms\n\n    public void DisplayRoom() {\n        Boolean moved = true;\n        Point2D currentRoom = GetRoom();\n        Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].DisplayRoom();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Maze.java	(revision 9bd1efbc945d9c08212c58bce74310ca3cc1ddc6)
+++ src/Maze.java	(date 1589977420085)
@@ -15,6 +15,8 @@
 
     static Room[][] Rooms;
     DataAccess DataAccess;
+    String bigString;
+    String[] lines;
 
     //Constructor
 
@@ -300,6 +302,36 @@
         Boolean moved = true;
         Point2D currentRoom = GetRoom();
         Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].DisplayRoom();
+        Rooms[(int) currentRoom.getX()][(int) currentRoom.getY()].getSamllRoomDisplay();
+    }
+
+    public void DisplayMaze() {
+        bigString = "";
+        for(int i = 0; i < Rooms.length; i++) {
+            for(int j = 0; j < Rooms[i].length; j++) {
+                bigString += Rooms[i][j].getSamllRoomDisplay();
+            }
+        }
+        lines = bigString.split("\n");
+        printHelper(0, 1, 2, 15, 16, 17);
+        printHelper(15, 16, 17, 30, 31, 32);
+        printHelper(30, 31, 32, 45, 46, 47);
+        printHelper(45, 46, 47, 60, 61, 62);
+        printHelper(60, 61, 62, lines.length, lines.length, lines.length);
     }
 
+    private void printHelper(int a, int b, int c, int x, int y, int z) {
+        for(int i = a; i < x; i += 3) {
+            System.out.print(lines[i]);
+        }
+        System.out.println();
+        for(int k = b; k < y; k += 3) {
+            System.out.print(lines[k]);
+        }
+        System.out.println();
+        for(int j = c; j < z; j += 3) {
+            System.out.print(lines[j]);
+        }
+        System.out.println();
+    }
 }
Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* This class is main, will start, load, save, and cheat/instuctions here\nAuthor: Steven Zuelke\n */\n\nimport QuestionTypes.Question;\nimport QuestionTypes.ShortAnswer;\nimport javafx.geometry.Point2D;\n\nimport javax.xml.crypto.Data;\nimport java.io.File;\nimport java.sql.*;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\npublic class Main {\n\n    private static Scanner Scan;\n    private static ArrayList<String> ValidInput = new ArrayList<String>();\n    private static Maze Maze;\n    private static boolean NeedsSaved = true;\n\n    public static void main(String[] args) {\n\n        Scan = new Scanner(System.in);\n        Maze = new Maze(); //So we have Access to Data\n        MainMenu();\n        Scan.close();\n\n    }//end main method\n\n    //Method to add questions to database within data program\n\n    private static void AddQuestions(){\n\n        String type, input;\n        String title, correct;\n        String[] answers = new String[4];\n        int numAns = 1; //will identify type of question by number of answers\n\n        System.out.println(\"To add Multiple Choice Enter 1\\n\" +\n                \"To add True/False Enter 2\\n\" +\n                \"To add Short Answer Enter 3\" +\n                \"To return to Database Menu Enter 4\");\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        ValidInput.add(\"3\");\n        ValidInput.add(\"4\");\n        type = ReadInput();\n        switch(type){\n\n            case \"1\":\n                numAns = 4;\n                break;\n            case \"2\":\n            case \"3\":\n                numAns = 0;\n                break;\n            case \"4\":\n                MainDataMenu();\n                return;\n\n        }//end switch type\n\n        //Get Question info\n        System.out.println(\"Enter Title:\");\n        title = Scan.nextLine();\n        for(int i = 0; i < numAns; i++){\n\n            System.out.println(\"Enter Possible Answer:\");\n            answers[i] = Scan.nextLine();\n\n        }//end for i\n\n        System.out.println(\"Enter Correct Answer:\");\n        if(type == \"2\") {\n\n            ValidInput.clear();\n            ValidInput.add(\"T\");\n            ValidInput.add(\"F\");\n            correct = ReadInput();\n\n        }//end if type == 2\n\n        else correct = Scan.nextLine();\n        //Confirm question before committing\n        System.out.println(\"Confirm your question:\");\n        System.out.println(title);\n        for(int i = 0; i < numAns; i++){\n\n            System.out.println(answers[i]);\n\n        }//end for i\n\n        System.out.println(\"Correct: \" + correct);\n        System.out.println(\"To confirm Enter 1\\n\" +\n                           \"To retry Enter 2\");\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        input = ReadInput();\n        if(input == \"2\"){\n\n            AddQuestions();\n            return;\n\n        }//end if input ==2\n\n        switch(type){\n\n            case \"1\":\n                Maze.DataAccess.AddMC(title, answers[0], answers[1], answers[2], answers[3], correct);\n                break;\n            case \"2\":\n                Maze.DataAccess.AddTF(title, correct);\n                break;\n            case \"3\":\n                Maze.DataAccess.AddSA(title, correct);\n                break;\n\n        }//end switch type\n\n        AddQuestions();//continue adding questions\n\n    }//end AddQuestions\n\n    //Method to display the room to console\n\n    private static void DisplayRoom(){\n\n\n    }//end DisplayRoom\n\n    //Method to list all questions within data program\n\n    private static void ListQuestions(){\n\n        String input;\n        int numAns = 1; //will identify type of question by number of answers\n        ArrayList<Question> questions = Maze.DataAccess.GetQuestions();\n\n        System.out.println(\"To see Multiple Choice Enter 1\\n\" +\n                \"To see True/False Enter 2\\n\" +\n                \"To see Short Answer Enter 3\\n\" +\n                \"To return to Database Menu Enter 4\");\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        ValidInput.add(\"3\");\n        ValidInput.add(\"4\");\n        input = ReadInput();\n        switch(input){\n\n            case \"1\":\n                numAns = 4;\n                break;\n            case \"2\":\n                numAns = 2;\n                break;\n            case \"3\":\n                numAns = 0;\n                break;\n            case \"4\":\n                MainDataMenu();\n                return;\n\n        }//end switch input\n\n        for(Question question : questions){\n\n            if(question.GetAnswers().length == numAns){\n\n                System.out.println(question.GetTitle());\n                for(int j = 0; j < numAns; j++){\n\n                    System.out.println(question.GetAnswers()[j]);\n\n                }//end for j\n\n                System.out.println(\"Correct Answer: \" + question.GetCorrect());\n\n            }//end if  = numAns\n\n        }//end foreach\n\n    }//end ListQuestions\n\n    //Method to Load a new game from a file, returns true if successful otherwise false\n\n    private static boolean LoadGame(){\n\n        boolean loaded = false;\n        File savedGameDirectory = new File(\"resources/savedGames\");\n\n        if(savedGameDirectory.list().length == 0) {\n            System.out.println(\"There are no saved games available\");\n            MainGameMenu();\n        } else {\n            //Creates a list of possible saved games to choose from\n            String[] saveGameList = savedGameDirectory.list();\n            System.out.println(\"Please enter the saved game you'd like to load from the options:\");\n            ValidInput.clear();\n\n            for(int i = 0; i < saveGameList.length; i++) {\n                //The value of i is changed to accommodate index selection without beginning options list at 0\n                System.out.println(i + 1 + \": \" + saveGameList[i]);\n                ValidInput.add(String.valueOf(i + 1));\n            } //end for loop\n\n            String input = ReadInput();\n\n            try {\n                //Will save the game with the chosen file name\n                SaveData data = (SaveData) ResourceManager.Load(\"resources/savedGames/\" + saveGameList[Integer.parseInt(input) - 1]);\n                Maze = data.maze;\n                loaded = true;\n            } catch (Exception e) {\n                System.out.println(\"Couldn't load saved data: \" + e.getMessage());\n            }\n        } //end else\n        return loaded;\n    }//end LoadGame\n\n    //Main Menu for the Database (List, Add, Remove)\n\n    public static void MainDataMenu(){\n\n        String input;\n\n        System.out.println(\"DATABASE\");\n        System.out.println(\"To see existing questions Enter 1\\n\" +\n                           \"To add new questions Enter 2\\n\" +\n                           \"To remove questions Enter 3\\n\" +\n                           \"To return to Main Menu Enter 4\");\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        ValidInput.add(\"3\");\n        ValidInput.add(\"4\");\n        input = ReadInput();\n        switch(input){\n\n            case \"1\":\n                ListQuestions();\n                break;\n            case \"2\":\n                AddQuestions();\n                break;\n            case \"3\":\n                RemoveQuestions();\n                break;\n            case \"4\":\n                MainMenu();\n                break;\n\n        }//end switch input\n\n    }//end MainDataMenu\n\n    //Main Menu for the Trivia Maze (New/Load, Instructions etc)\n\n    public static void MainGameMenu(){\n\n        String input;\n\n        System.out.println(\"TRIVIA GAME\");\n        System.out.println(\"To start a new game Enter 1\\n\" +\n                \"To load an existing game file Enter 2\\n\" +\n                \"To return to Main Menu Enter 3\");\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        ValidInput.add(\"3\");\n        input = ReadInput();\n        switch(input){\n\n            case \"1\":\n                NewGame();\n                break;\n            case \"2\":\n                if(LoadGame()) {\n\n                    PlayGame();\n\n                }//end else\n\n                break;\n            case \"3\":\n                MainMenu();\n                break;\n\n        }//end switch input\n\n    }//end MainGameMenu\n\n    //Method to present main menu and\n    //Goto either Database, or to the Game\n\n    public static void MainMenu(){\n\n        String input;\n\n        System.out.println(\"Welcome!\\n\" +\n                           \"Enter 1 to play Trivia Maze\\n\" +\n                           \"Enter 2 to access the Database\");\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        input = ReadInput();\n        switch(input){\n\n            case \"1\":\n                MainGameMenu();\n                break;\n            case \"2\":\n                MainDataMenu();\n                break;\n\n        }//end switch input\n\n    }//end MainMenu\n\n    //Method to start a new game and start the game\n\n    private static void NewGame(){\n\n        Maze = new Maze();\n        System.out.println(\"You started a new game!\");\n        PlayGame();\n\n    }//end newGame\n\n    //Method to play the entire game from an enstanciated maze\n\n    private static void PlayGame(){\n\n        boolean gameOver = false;\n\n        System.out.println(\"Welcome to the Trivia Game!\");\n        while(!gameOver){\n\n            TakeTurn();\n            if(Maze.CheckLoss(0,0, new ArrayList<Point2D>()) ||\n                Maze.CheckWin()){\n\n                gameOver = true;\n\n            }//end if games over\n\n        }//end while game not over\n\n    }//end PlayGame\n\n    //Method to check if player wants to save before quitting\n\n    private static void QuitGame(){\n\n        String input;\n\n        System.out.println(\"Before quitting, would you like to save the game?\\n\" +\n                \"Enter 1 to save the game\\n\" +\n                \"Enter 2 to return to the main menu without saving\");\n\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        input = ReadInput();\n        switch(input){\n\n            case \"1\":\n                SaveGame();\n                MainGameMenu();\n                break;\n            case \"2\":\n                MainDataMenu();\n                break;\n\n        }\n\n    }//method to QuitGame\n\n    //Method to read valid input with possible answers\n\n    private static String ReadInput(){\n\n        Boolean invalid = true;\n        String input = \"\";\n\n        while(invalid){\n\n            System.out.print(\"(Answers: \");\n            for(String string : ValidInput){\n\n                System.out.print(string + \" \");\n\n            }//end foreach\n\n            System.out.print(\")\\n\");\n            input = Scan.nextLine().toUpperCase();\n            for(int i = 0; i < ValidInput.size(); i++){\n\n                String compare = ValidInput.get(i).toUpperCase();\n                if(input.equals(compare)){\n                    return input;\n\n                }//end if\n\n            }//end for i\n\n        }//end while invalid\n\n        return input;\n\n    }//end ReadInput\n\n    //Method to remove Question within Database Program\n\n    private static void RemoveQuestions(){\n\n        String input;\n        String title, correct;\n\n        System.out.println(\"To Remove a question: Enter the title\\n\" +\n                \"To return to Database Menu Enter 1\\n\");\n        title = Scan.nextLine();\n        if(title.equals(\"1\")){\n\n            MainDataMenu();\n            return;\n\n        }//end if 1\n\n        //Confirm question before committing\n        System.out.println(\"Confirm your question:\");\n        System.out.println(title);\n        System.out.println(\"To confirm Enter 1\\n\" +\n                \"To retry Enter 2\");\n        ValidInput.clear();\n        ValidInput.add(\"1\");\n        ValidInput.add(\"2\");\n        input = ReadInput();\n        if(input == \"2\"){\n\n            RemoveQuestions();\n            return;\n\n        }//end if input ==2\n\n        Maze.DataAccess.RemoveQuestion(title);\n        RemoveQuestions();//continue removing questions\n\n    }//end RemoveQuestions\n\n    //Method to save the game\n\n    private static void SaveGame(){\n\n        SaveData data = new SaveData();\n        data.maze = Maze;\n\n        System.out.println(\"Please enter a name for your saved game: \");\n        String fileName = Scan.nextLine();\n        File file = new File(\"resources/savedGames/\" + fileName + \".triv\");\n        if(file.isFile()) {\n            System.out.println(file.getName() + \" already exists, would you like to overwrite it?\\n\" +\n                    \"Enter 1 to overwrite file\\n\" +\n                    \"Enter 2 to choose new file name\");\n            ValidInput.clear();\n            ValidInput.add(\"1\");\n            ValidInput.add(\"2\");\n            String input = ReadInput();\n            switch(input){\n\n                case \"1\":\n                    break;\n                case \"2\":\n                    SaveGame();\n                    return;\n            }\n        } else {\n\n            try {\n                ResourceManager.Save(data, \"resources/savedGames/\" + fileName + \".triv\");\n                NeedsSaved = false;\n            } catch (Exception e) {\n                System.out.println(\"Couldn't save: \" + e.getMessage());\n            }\n\n        }\n\n    }//end SaveGame\n\n    //Method to take a single turn by the player\n\n    private static void TakeTurn(){\n\n        String input = \"\";\n        boolean valid = false;\n\n        while(!valid){\n\n            System.out.println(\"You are in room: \" + Maze.GetRoom().getX() + \", \" + Maze.GetRoom().getY());\n            Maze.DisplayRoom();\n            System.out.println(\"Which direction do you want to go?\");\n            System.out.println(\"Enter S to save game\");\n            System.out.println(\"Enter Q to quit game\");\n            ValidInput.clear();\n            ValidInput.add(\"1\");\n            ValidInput.add(\"2\");\n            ValidInput.add(\"0\");\n            ValidInput.add(\"3\");\n            ValidInput.add(\"Q\");\n            ValidInput.add(\"S\");\n            input = ReadInput();\n            switch(input){\n\n                case \"S\":\n                    SaveGame();\n                    break;\n                case \"Q\":\n                    QuitGame();\n                    return;\n                default:\n                    valid = Maze.ChangeRooms(Integer.parseInt(input));\n                    break;\n\n            }//end switch input\n\n        }//end while not valid\n\n    }//end Take Turn\n\n}//end class\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Main.java	(revision 9bd1efbc945d9c08212c58bce74310ca3cc1ddc6)
+++ src/Main.java	(date 1589977073302)
@@ -3,13 +3,9 @@
  */
 
 import QuestionTypes.Question;
-import QuestionTypes.ShortAnswer;
 import javafx.geometry.Point2D;
 
-import javax.xml.crypto.Data;
 import java.io.File;
-import java.sql.*;
-import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Scanner;
 
@@ -502,6 +498,7 @@
 
             System.out.println("You are in room: " + Maze.GetRoom().getX() + ", " + Maze.GetRoom().getY());
             Maze.DisplayRoom();
+            Maze.DisplayMaze();
             System.out.println("Which direction do you want to go?");
             System.out.println("Enter S to save game");
             System.out.println("Enter Q to quit game");
Index: src/TriviaMazeGameGUI.form
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/TriviaMazeGameGUI.form	(date 1590303680530)
+++ src/TriviaMazeGameGUI.form	(date 1590303680530)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<form xmlns="http://www.intellij.com/uidesigner/form/" version="1" bind-to-class="TriviaMazeGameGUI">
+  <grid id="27dc6" binding="MainPanel" layout-manager="GridLayoutManager" row-count="2" column-count="2" same-size-horizontally="false" same-size-vertically="false" hgap="-1" vgap="-1">
+    <margin top="0" left="0" bottom="0" right="0"/>
+    <constraints>
+      <xy x="20" y="20" width="500" height="400"/>
+    </constraints>
+    <properties/>
+    <border type="none"/>
+    <children>
+      <component id="c46d4" class="javax.swing.JButton" binding="MoveLeft">
+        <constraints>
+          <grid row="1" column="1" row-span="1" col-span="1" vsize-policy="0" hsize-policy="3" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+        <properties>
+          <text value="Button"/>
+        </properties>
+      </component>
+      <hspacer id="aed2f">
+        <constraints>
+          <grid row="1" column="0" row-span="1" col-span="1" vsize-policy="1" hsize-policy="6" anchor="0" fill="1" indent="0" use-parent-layout="false"/>
+        </constraints>
+      </hspacer>
+      <vspacer id="7a2a0">
+        <constraints>
+          <grid row="0" column="0" row-span="1" col-span="1" vsize-policy="6" hsize-policy="1" anchor="0" fill="2" indent="0" use-parent-layout="false"/>
+        </constraints>
+      </vspacer>
+    </children>
+  </grid>
+</form>
Index: src/TriviaMazeGameGUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/TriviaMazeGameGUI.java	(date 1590303680536)
+++ src/TriviaMazeGameGUI.java	(date 1590303680536)
@@ -0,0 +1,27 @@
+import javax.swing.*;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+
+public class TriviaMazeGameGUI extends JFrame{
+    private JPanel MainPanel;
+    private JButton MoveLeft;
+
+    public TriviaMazeGameGUI(String title) {
+        super(title);
+
+        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
+        this.setContentPane(MainPanel);
+        this.pack();
+        MoveLeft.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                Maze.ChangeRooms(3);
+            }
+        });
+    }
+
+    public static void main(String[] args) {
+        JFrame frame = new TriviaMazeGameGUI("Trivia Maze Game");
+        frame.setVisible(true);
+    }
+}
